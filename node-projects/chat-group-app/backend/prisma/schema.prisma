generator client {
  provider        = "prisma-client-js"
  previewFeatures = "mongoDb"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  githubId    Int?      @unique
  name        String
  email       String?   @unique
  password    String?
  bio         String?   @default("Hello!!!")
  phone       String?   @unique
  avatar      Avatar?
  role        Role?     @default(USER)
  ownerGroups String?   @db.ObjectId
  admins      String[]  @db.Array(ObjectId)
  groups      String[]  @db.Array(ObjectId)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Channel     Channel[] @relation(fields: [ownerGroups, admins, groups], references: [id], onDelete: Cascade)
}

model Avatar {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name      String?  @default("Profile picture")
  url       String?  @default("avatar_default.jpg")
  size      Float?   @default(0)
  userID    String   @db.ObjectId@unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Channel {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name        String
  description String
  creatorID   String   @db.ObjectId
  adminsIDs   String[] @db.Array(ObjectId)
  membersIDs  String[] @db.Array(ObjectId)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]   @relation(fields: [creatorID, adminsIDs, membersIDs], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  message   String
  userID    String   @db.ObjectId
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
}
