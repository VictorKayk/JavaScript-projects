generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                   @id @default(autoincrement())
  githubId    Int?                  @unique
  googleId    Int?                  @unique
  name        String
  email       String?               @unique
  password    String?
  bio         String                @default("Hello there!!!")
  phone       String?               @unique
  avatar      Avatar?
  role        Role?                 @default(user)
  permissions Permission[]
  messages    Message[]
  ownerGroups Channel[]
  groups      ChannelOnUserMember[]
  groupAdmin  ChannelOnUserAdmin[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model Avatar {
  id        Int      @id @default(autoincrement())
  name      String?  @default("Profile picture")
  url       String?  @default("avatar_default.jpg")
  size      Float?   @default(0)
  userID    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Permission {
  id     Int         @id @default(autoincrement())
  name   Permissions
  userID Int
  User   User        @relation(fields: [userID], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  moderator
  user
}

enum Permissions {
  create_post
  update_post
  delete_post
  upload_thumb
  upload_url_thumb
  remove_thumb
  upload_banner
  upload_url_banner
  remove_banner
  read_tag
  create_tag
  update_tag
  delete_tag
  update_comment
  delete_comment
}

model Channel {
  id          Int                   @id @default(autoincrement())
  name        String
  description String
  icon        ChannelIcon?
  creatorID   Int
  admins      ChannelOnUserAdmin[]
  members     ChannelOnUserMember[]
  messages    Message[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  creator     User                  @relation(fields: [creatorID], references: [id], onDelete: Cascade)
}

model ChannelOnUserMember {
  userID    Int
  user      User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  channelID Int
  channel   Channel @relation(fields: [channelID], references: [id], onDelete: Cascade)

  @@id([userID, channelID])
}

model ChannelOnUserAdmin {
  userID    Int
  user      User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  channelID Int
  channel   Channel @relation(fields: [channelID], references: [id], onDelete: Cascade)

  @@id([userID, channelID])
}

model ChannelIcon {
  id        Int      @id @default(autoincrement())
  name      String?  @default("Channel icon")
  url       String?  @default("channel_icon_default.jpg")
  size      Float?   @default(0)
  channelID Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channel   Channel  @relation(fields: [channelID], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  userID    Int
  channelID Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelID], references: [id], onDelete: Cascade)
}
